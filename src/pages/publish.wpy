<style lang="less" scoped>
.inline-box {
  padding: 20rpx 20rpx;
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-content: center;
  flex-wrap: wrap;
  font-size: 32rpx;
  border-bottom: 1px solid #ddd;
  .input-title {
    color: #333;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    image {
      width: 45rpx;
      height: 45rpx;
    }
  }
  .input-value {
    color: #999;
    .end-location {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      flex-wrap: wrap;
      padding-left: 15rpx;
      > view {
        flex: 0 0 auto;
        border: 1px solid #ddd;
        padding: 5rpx 10rpx;
        margin-right: 20rpx;
        margin-bottom: 10rpx;
        border-radius: 6rpx;
      }
    .add-region {
        color: rgba(18, 199, 211, 1);
        background-color: rgba(248, 248, 248, 1);
        margin-right: 0rpx;
        margin-top: -10rpx;
        font-size: 30rpx;
        padding: 5rpx 10rpx;
        border-radius: 6rpx;
    }
    }
    .desc-textarea {
      font-size: 30rpx;
      border: 1px solid rgba(248, 248, 248, 1);
      border-radius: 8rpx;
      height: 200rpx;
      width: 100%;
      padding: 10rpx 15rpx;
    }
    .desc-textarea-placeholder {
      color: #ddd;
    }
  }
}
.pub-btn {
  position: fixed;
  bottom: 0rpx;
  left: 0rpx;
  width: 100%;
  background-color: rgba(18, 199, 211, 1);
  color: #fff;
  border-radius: 0rpx;
  &:active {
    background-color: rgb(20, 176, 187, 1);
  }
}
.icon{
    font-size: 45rpx;
    margin-right: 20rpx;
    color: rgb(20, 176, 187, 1);
}
</style>
<template>
    <view class="container">
        <view class="inline-box">
            <view class="input-title">
                <i class="iconfont tx-biaoji icon" style="margin-right: 12rpx;"></i>
                <text>出发地</text>
            </view>
            <view class="input-value">
                <picker mode="region" @change="selectStartLocation" value="{{startRegion}}">
                    <text>{{startRegionShow}}</text>
                    <text> > </text>
                </picker>
            </view>
        </view>
        <view class="inline-box" style="padding-bottom: 0;">
            <view class="input-title" style="width: 100%;">
                <i class="iconfont tx-biaoji icon" style="margin-right: 12rpx;"></i>
                <text>目的地</text>
            </view>
            <view class="input-value" style="width: 100%;padding: 10rpx 45rpx;">
                <view class="end-location">
                    <repeat for="{{endRegionShow}}" key="item">
                        <view @tap.stop="removeEndRegion" data-index="{{index}}">{{item}}</view>
                    </repeat>    
                    <picker mode="region" @change="selectEndLocation" value="{{endRegion}}">    
                        <view class="iconfont tx-jia icon add-region" hidden="{{hideAddBtn}}"></view>
                    </picker>
                </view>
            </view>
        </view>
        <view class="inline-box">
            <view class="input-title">
                <i class="iconfont tx-riqi icon" style="font-size: 35rpx;"></i>
                <text>出发日期</text>
            </view>
            <view class="input-value">
                <picker mode="date" @change="selectStartTime" value="{{startTime}}" start="{{startTimeRange.start}}" end="{{startTimeRange.end}}">
                    <text>{{startTime}}</text>
                    <text> > </text>
                </picker>
            </view>
        </view>
        <view class="inline-box">
            <view class="input-title">
                <i class="iconfont tx-riqi icon" style="font-size: 35rpx;"></i>
                <text>返回日期</text>
            </view>
            <view class="input-value">
                <picker mode="date" @change="selectEndTime" value="{{endTime}}" start="{{endTimeRange.start}}" bindend="{{endTimeRange.end}}">
                    <text>{{endTime}}</text>
                    <text> > </text>
                </picker>
            </view>
        </view>
        <view class="inline-box">
            <view class="input-title">
                <i class="iconfont tx-11 icon" style="margin-right:0;"></i>
                <text>参团人数</text>
            </view>
            <view class="input-value">
                <picker mode="selector" @change="selectPeople" value="{{peopleKey}}" range="{{peopleRange}}">
                    <text>{{people}}</text>
                    <text> > </text>
                </picker>
            </view>
        </view>
        <view class="inline-box">
            <view class="input-title">
                <i class="iconfont tx-description icon" style="margin-right: 10rpx;"></i>
                <text>行程说明</text>
            </view>
            <view class="input-value" style="width: 100%;padding: 10rpx 45rpx;">
                <textarea class="desc-textarea" placeholder-class="desc-textarea-placeholder" value="{{otherDesc}}" maxlength="50" placeholder="请填写" bindconfirm="confirmDesc"></textarea>
            </view>
        </view>
        <view class="inline-box" style="border:0;padding: 10rpx 10rpx;">
            <button class="pub-btn" @tap.stop="publish">{{submitBtnText}}</button>
        </view>
    </view>
</template>
<script>
    import wepy from 'wepy';
    import HttpService from '../util';

    export default class Publish extends wepy.page {
        config = {
            navigationBarTitleText: '发布行程'
        }
        selfData = {
            regionExp: /县|行政|自治|直辖|盟/,
            trip_mode: '', // 当前页面的模式
            originTrip: null,
            out_mode: '' // 退出当前页面的模式
        }
        data = {
            hideAddBtn: false,
            peopleRange: [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],
            peopleKey: 0,
            startRegionShow: '请选择',
            startRegion: [],
            endRegionShow: [],
            endRegion: [],
            startTime: '请选择',
            endTime: '请选择',
            people: '请选择',
            otherDesc: '',
            startTimeRange: {
                start: '',
                end: ''
            },
            endTimeRange: {
                start: '',
                end: ''
            },
            submitBtnText: '发布'
        }
        methods = {
            // 出发地被选择
            selectStartLocation(e){
                const { value } = e.detail;
                this.startRegion = value;
                if(this.selfData.regionExp.test(value[1]) || value[0] === value[1]){
                    this.startRegionShow = `${value[0]}-${value[2]}`;
                }else{
                    this.startRegionShow = `${value[0]}-${value[1]}`;
                }
            },
            // 目的地被选择
            selectEndLocation(e){
                const { value } = e.detail;
                let thisRegion;
                this.endRegion = value;
                if(this.selfData.regionExp.test(value[1]) || value[0] === value[1]){
                    thisRegion = `${value[0]}-${value[2]}`;
                }else{
                    thisRegion = `${value[0]}-${value[1]}`;
                }
                if(this.endRegionShow.indexOf(thisRegion) === -1){
                    this.endRegionShow = [...this.endRegionShow, thisRegion];
                }
                if(this.endRegionShow.length === 5){
                    this.hideAddBtn = true;
                }
            },
            // 移出已选择的触发地
            removeEndRegion(e){
                const { index } = e.currentTarget.dataset;
                this.endRegionShow = [...this.endRegionShow.slice(0,index), ...this.endRegionShow.slice(index+1)];
                if(this.endRegionShow.length !== 5){
                    this.hideAddBtn = false;
                }
            },
            // 出发时间被选择
            selectStartTime(e){
                this.startTime = e.detail.value;
                this.endTimeRange.start = this.getOtherDay(this.startTime, 'next');
            },
            // 结束时间被选择
            selectEndTime(e){
                this.endTime = e.detail.value;
                this.startTimeRange.end = this.getOtherDay(this.endTime, 'prev');
            },
            // 参团人数被选择
            selectPeople(e){
                this.peopleKey = e.detail.value;
                this.people = this.peopleRange[+this.peopleKey];
            },
            // 确认说明
            confirmDesc(e){
                this.otherDesc = e.detail.value.replace(/党|sb/ig, '').trim();
            },
            publish(){
                //参数校验
                const formData = this.checkForm();
                if(formData === false) return;
                wx.showLoading({
                    title: '发布中',
                    mask: true
                });
                this.pushTrip(formData, ()=>{
                    wx.hideLoading();
                });
            }
        }
        // 检查数据合法性
        checkForm(noMsg){
            let msg = '';
            if(this.startRegionShow === '请选择'){
                msg = '请选择出发地';
            }else if(this.endRegionShow.length === 0){
                msg = '请选择目的地';
            }else if(this.startTime === '请选择'){
                msg = '请选择出发日期';
            }else if(this.endTime === '请选择'){
                msg = '请选择返回日期';
            }else if(this.people === '请选择'){
                msg = '请选择参团的人数';
            }
            if(noMsg){
                return msg.length === 0;
            }else{
                if(msg.length !== 0){
                    this.showMsg(msg);
                    return false;
                }else{
                    const formData = this.diffTrip();
                    if(this.selfData.trip_mode === 'edit_trip' && formData === false){
                        this.showMsg('行程信息未改变');
                        return false;
                    }
                    return formData;
                }
            }
        }
        // 发布行程(新的以及修改的)
        pushTrip(data, callback){
            let urlName = 'publishTrip';
            const { trip_mode, trip_id } = this.selfData;
            if(trip_mode === 'edit_trip'){
                // 编辑已发布的行程信息
                data.trip_id = trip_id;
            }else if(trip_mode === 'draft'){
                // 发布草稿为行程信息
                data.trip_id = trip_id;
                urlName = 'publishDraftToTrip';
            }
            const Msg = ((mode)=>{
                if(mode === 'edit_trip'){
                    return {
                        success: '修改成功',
                        fail: '修改失败'
                    };
                }else{
                    return {
                        success: '发布成功',
                        fail: '发布失败'
                    };
                }
            })(trip_mode);

            HttpService.Post({
                urlName: urlName,
                data: data,
                success: (code, data, msg) => {
                    if(code === 20000){
                        wx.showToast({
                            title: Msg.success,
                            icon: 'success',
                            mask: true,
                            complete: () => {
                                this.selfData.out_mode = 'publish_trip';
                                wx.navigateBack();
                            }
                        });
                    }else{
                        wx.showToast({
                            title: Msg.fail,
                            icon: 'none',
                            mask: true
                        });
                    }
                },
                fail: (msg) => {
                    wx.showToast({
                        title: Msg.fail,
                        icon: 'none',
                        mask: true
                    });
                },
                complete: () => {
                    callback && callback();
                }
            });
        }
        // 提示框
        showMsg(msg){
            wx.showToast({
                title: msg,
                icon: 'none'
            });
        }
        // 获取指定日期
        getOtherDay(time, flag){
            let timer = new Date(`${time} 00:00:00`).getTime();
            if(flag === 'next'){
                timer += 86400000;
            }else if(flag === 'prev'){
                timer -= 86400000;
            }else{
                timer = new Date().getTime();
            }
            const nextTimer = new Date(timer);
            let year = nextTimer.getFullYear();
            let month = nextTimer.getMonth() + 1;
            let day = nextTimer.getDate();
            month = month > 9 ? month : '0' + month;
            day = day > 9 ? day : '0' + day;
            return `${year}-${month}-${day}`;
        }
        // 初始化日期范围
        initTime(){
            this.startTimeRange.start = this.getOtherDay();
            this.endTimeRange.start = this.getOtherDay(this.startTimeRange.start, 'next');
            this.startTimeRange.end = '';
            this.endTimeRange.end = '';
        }
        // 查询行程记录
        queryThisTrip(trip_id, user_id){
            wx.showLoading({
                title: '正在为您获取行程',
                mask: true
            });
            HttpService.Post({
                urlName: 'queryTripDetail',
                data: {
                    trip_id,
                    user_id
                },
                success: (code, data, msg) => {
                    if(code === 20000){
                        this.setForm(data);
                    }else{
                        wx.showToast({
                            title: '查询您的行程草稿失败',
                            icon: 'none',
                            mask: true,
                            duration: 2000,
                            complete: () => {
                                this.selfData.out_mode = 'query_fail';
                                wx.setStorageSync('publish', 0);
                                wx.navigateBack();
                            }
                        });
                    }
                },
                fail: (msg) => {
                    wx.showToast({
                        title: '查询您的行程草稿失败',
                        icon: 'none',
                        mask: true,
                        duration: 2000,
                        complete: () => {
                            this.selfData.out_mode = 'query_fail';
                            wx.setStorageSync('publish', 0);
                            wx.navigateBack();
                        }
                    });
                },
                complete: () => {
                    wx.hideLoading();
                }
            });
        }
        // 比较行程信息是否改变
        diffTrip(){
            let isDiff = false;
            const { originTrip } = this.selfData;
            const formData = {};
            if(originTrip !== null){
                const hasOwnProperty = Object.prototype.hasOwnProperty;
                for(let key in originTrip){
                    if(hasOwnProperty.call(originTrip, key)){
                        if(Array.isArray(originTrip[key])){
                            if(JSON.stringify(originTrip[key]) !== JSON.stringify(this[key])){
                                isDiff = true;
                                break;
                            }
                        }else{
                            if(originTrip[key] !== this[key]){
                                isDiff = true;
                                break;
                            }
                        }
                    }
                }
            }
            if(isDiff === true || originTrip === null){
                formData.trip_start_location = JSON.stringify([this.startRegionShow, this.startRegion]);
                formData.trip_end_location = JSON.stringify([this.endRegionShow, this.endRegion]);
                formData.trip_start_time = this.startTime;
                formData.trip_end_time = this.endTime;
                formData.trip_member_count = this.people;
                formData.trip_other_desc = this.otherDesc;
                formData.trip_publish_user_id = this.$parent.globalData.userInfo.uid;
                return formData;
            }
            return false;
        }
        // 依据数据设置表单显示内容
        setForm (trip) {
            let { 
                trip_start_location,
                trip_end_location,
                trip_start_time,
                trip_end_time,
                trip_merber_count,
                trip_other_desc
            } = trip;
            trip_start_location = JSON.parse(trip_start_location);
            trip_end_location = JSON.parse(trip_end_location);

            this.startRegionShow = trip_start_location[0]; // 开始地点(显示)
            this.startRegion = trip_start_location[1]; // 开始地点(实际)
            this.endRegionShow = trip_end_location[0]; // 结束地点(显示)
            this.endRegion = trip_end_location[1]; // 结束地点(实际)
            this.people = trip_merber_count; // 行程人数
            this.peopleKey = this.peopleRange.indexOf(+trip_merber_count); // 人数索引
            this.otherDesc = trip_other_desc; // 行程说明
            const nowDay = this.getOtherDay();
            if(nowDay < trip_start_time){
                this.startTime = trip_start_time;
                this.endTime = trip_end_time;
            }else if(nowDay >= trip_start_time && nowDay <= trip_end_time){
                this.startTime = nowDay;
                if(new Date(`${trip_end_time} 00:00:00`).getTime() - new Date(`${nowDay} 00:00:00`).getTime() > 86400000){
                    this.endTime = trip_end_time;
                }else{
                    this.endTime = this.getOtherDay(nowDay, 'next');
                }
            }else{
                this.startTime = nowDay;
                this.endTime = this.getOtherDay(nowDay, 'next');
            }
            this.startTimeRange.start = nowDay;
            this.endTimeRange.start = this.getOtherDay(nowDay, 'next');
            // 如果是修改已经发布的行程信息，则需要将初始信息保存起来，用于比较是否数据改变
            if(this.selfData.trip_mode === 'edit_trip'){
                this.selfData.originTrip = {
                    startRegionShow: this.startRegionShow,
                    endRegionShow: [...this.endRegionShow],
                    startTime: this.startTime,
                    endTime: this.endTime,
                    people: this.people,
                    otherDesc: this.otherDesc
                };
            }
        }
        // 页面加载完成
        onLoad(config){
            this.selfData.out_mode = '';
            const { trip_id, trip_mode } = config;
            if(trip_mode === 'draft'){
                // 由我的草稿进入
                this.selfData.trip_id = trip_id;
                this.selfData.trip_mode = 'draft';
                this.queryThisTrip(trip_id, this.$parent.globalData.userInfo.uid);
            }else{
                if(typeof trip_id === 'undefined'){
                    // 发布新的行程
                    this.selfData.trip_mode = 'new_trip';
                    this.initTime();
                }else{
                    // 修改已经发布的行程内容
                    this.selfData.trip_id = trip_id;
                    this.selfData.trip_mode = 'edit_trip';
                    this.submitBtnText = '修改';
                    this.queryThisTrip(trip_id, this.$parent.globalData.userInfo.uid);
                }
            }
        }
        // 页面卸载
        onUnload(){
            const { trip_mode, out_mode, trip_id } = this.selfData;
            const formData = this.diffTrip();
            if(out_mode.length === 0){
                if(trip_mode === 'draft'){
                    // 查看我的草稿并正常退出时
                    if(formData){
                        wx.showModal({
                            title: '同行',
                            content: '您的草稿已改动，是否保存',
                            cancelText: '算了',
                            confirmText: '保存',
                            cancelColor: '#dddddd',
                            confirmColor: '#12C7D3',
                            success: ({confirm, cancel}) => {
                                if(confirm){
                                    // 请求保存草稿接口
                                }
                            }
                        });
                    }
                }else if(trip_mode === 'new_trip'){
                    // 发布新的行程并直接正常的退出时新建草稿
                    if(this.checkForm(true)){
                        wx.showModal({
                            title: '同行',
                            content: '是否将您未发布的行程保存为草稿',
                            cancelText: '算了',
                            cancelColor: '#dddddd',
                            confirmText: '保存',
                            confirmColor: '#12C7D3',
                            success: ({confirm, cancel}) => {
                                if(confirm){
                                    // 请求保存草稿接口
                                }
                            }
                        });
                    }
                }else if(trip_mode === 'edit_trip'){
                    // 编辑已发布的行程并直接正常的退出时
                    if(formData){
                        wx.showModal({
                            title: '同行',
                            content: '您的行程信息已改动，是否保存',
                            cancelText: '算了',
                            cancelColor: '#dddddd',
                            confirmText: '保存',
                            confirmColor: '#12C7D3',
                            success: ({confirm, cancel}) => {
                                if(confirm){
                                    // 请求修改行程接口
                                }
                            }
                        });
                    }
                }
            }else if(out_mode === 'publish_trip'){
                // 当发布新的行程或者修改行程发布成功时
                wx.setStorageSync('publishToFresh', 1);
            }
        }
    }

</script>

