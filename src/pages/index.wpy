<style lang="less">
  .container{
    position: relative;
  }
  view {
    box-sizing: border-box;
  }
  .index-swiper {
    width: 100%;
    height: 150px;
    position: relative;
    box-sizing: border-box;
  }
  .search-box {
    width: 690rpx;
    position: absolute;
    top: 8rpx;
    left: 30rpx;
    border: 1rpx solid rgba(255, 255, 255, .2);
    border-radius: 8rpx;
    background-color: rgba(255, 255, 255, .3);
    box-shadow: 0 0 8rpx rgba(0, 0, 0, .3);
    input {
      height: 60rpx;
      line-height: 60rpx;
      font-size: 24rpx;
      color: #fff;
      padding-right: 10rpx;
      padding-left: 60rpx;
    }
    .search-icon {
      position: absolute;
      top: 12rpx;
      left: 12rpx;
      font-weight: bold;
    }
  }
  .trip-list{
    box-sizing: border-box;
    background-color: #ddd;
    width: 100%;
  }
  .banner{
    width: 100%;
    height: 350rpx;
    image{
      width: 100%;
    }
  }
  .upper_tip{
    width: 100%;
    height: 30px;
    line-height: 30px;
    text-align: center;
    background-color: transparent;
    color: #ddd;
    font-size: 30rpx;
  }
  .pub-btn{
    position: fixed;
    bottom: 100rpx;
    right: 30rpx;
    width: 90rpx;
    height: 90rpx;
    line-height: 90rpx;
    text-align: center;
    border-radius: 50%;
    border: 1px solid rgba(18, 199, 211, .8);
    background-color: rgba(18, 199, 211, .8);
    color: rgba(248, 248, 248, 1);
    font-size: 30rpx;
    box-shadow: 0 0 10rpx rgba(0,0,0,.8);
    &:active{
      background-color: rgba(18, 199, 211, 1);
    }
  }
</style>
<template>
  <view class="container">
    <scroll-view scroll-y style="height: {{viewHeight+'px'}}" lower-threshold="30" bindscrolltolower="loadMoreTrip">
      <swiper class="banner" indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}" interval='{{interval}}' duration="{{duration}}">
        <block wx:for="{{imgUrls}}" wx:key="key">
          <swiper-item>
            <image src="{{item}}" class="slide-image" width="375" height="195" mode="scaleToFill"/>
          </swiper-item>
        </block>
      </swiper>
      <view class="search-box">
        <icon class="search-icon" type="search" size="20" color="#FFFFFF"/>
        <input confirm-type="search" placeholder-style="color:#FFFFFF" placeholder="关键字查询" bindconfirm="search"/>
      </view>
      <view class="trip-list">
        <repeat for="{{tripList}}" key="key">
          <Trip 
            :userId="item.publish_user_id"
            :userName="item.publish_user_wx_name"
            :userImg="item.publish_user_wx_portriat"
            :createTime="item.trip_create_time"
            :location="item.trip_end_location"
            :startTime="item.trip_start_time"
            :endTime="item.trip_end_time"
            :tripId="item.trip_id"
            />
        </repeat>
      </view>
      <view class="upper_tip">
        <text>{{upperMsg}}</text>
      </view>
    </scroll-view>
    <navigator url="/pages/publish">
      <view class="pub-btn" >
        <text>发布</text>
      </view>
    </navigator>  
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Trip from '../components/trip'
  import HttpService from '../util';

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '与我同行',
      enablePullDownRefresh: true,
    }
    components = {
        Trip
    }
    selfData = {
      keyword: '',
      pageNo: 1, // 当前页
      pageSize: 10, // 每页的数量
      count: 35, // 总数据量
      done: false, // 是否加载完全部数据
      pending: false // 是否正在请求分页数据
    }
    data = {
      canIUse: wepy.canIUse('button.open-type.getUserInfo'),
      userInfo: null || '暂无数据',
      imgUrls: [
        'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg',
        'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg',
        'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg'
      ],
      indicatorDots: true,
      autoplay: true,
      interval: 5000,
      duration: 1000,
      tripList: [], // 行程列表数据
      viewHeight: 500, //信息展示窗口的高度
      upperMsg: ''
    }
    // 上滑显示提示
    upperControl = {
      show: (msg) => {
        this.upperMsg = msg;
      },
      hide: () => {
        this.upperMsg = '';
      }
    }
    methods = {
      // bindGetUserInfo: function(e) {
      //   if (e.source.data.userInfo) {
      //     console.log('用户已经授权！')
      //   } else {
      //     console.log('用户按了拒绝按钮')
      //   }
      // },
      // getUserInfo: function() {
      //   this.$parent.getUserInfo(function(data) {
      //     console.log(data)
      //   })
      // },
      // 加载更多行程信息
      loadMoreTrip(){
        if(this.selfData.pending === false && this.selfData.done === false){
          this.selfData.pending = true;
          this.selfData.pageNo++;
          this.requestTripList(
            this.selfData.keyword, 
            this.selfData.pageNo, 
            this.selfData.pageSize, 
            () => {
              this.selfData.pending = false;
            }
          );
        }
      },
      // 搜索
      search(event){
        if(this.selfData.pending === false){
          this.selfData.pending = true;
          this.selfData.keyword = event.detail.value.replace(/^\s+/, '').replace(/\s+$/, '');
          this.selfData.pageNo = 1;
          this.requestTripList(
            this.selfData.keyword, 
            this.selfData.pageNo, 
            this.selfData.pageSize, 
            () => {
              this.selfData.pending = false;
            });
        }
      }
    }
    // 请求行程数据
    requestTripList(keyword = '', pageNo = 1, pageSize = 10, callback){
      HttpService.Post({
            urlName: 'queryTripListByWord',
            data: {
                keyword,
                pageNo,
                pageSize
            },
            success: (code, data, msg) => {
              /* 查询记录成功 */
              if(code === 20000){
                const { count, list } = data;
                this.selfData.count = count;
                if(count === 0){
                  // 暂无数据
                  this.tripList = [];
                  this.upperControl.show(`没有搜索到"${keyword}"相关的行程`);
                }else{
                  if(pageNo === 1){
                    // 新查询
                    this.tripList = list.map((trip)=>{
                      trip.trip_end_location = JSON.parse(trip.trip_end_location);
                      return trip;
                    });
                    this.upperControl.show('加载中...');
                  }else{
                    // 后续的分页查询
                    this.tripList = [...this.tripList, ...list.map((trip)=>{
                      trip.trip_end_location = JSON.parse(trip.trip_end_location);
                      return trip;
                    })];
                  }
                  if(pageNo * pageSize >= this.selfData.count){
                    this.selfData.done = true;
                    this.upperControl.show('--- 这是我的底线了 ---');
                  }else{
                    this.selfData.done = false;
                  }
                }
                this.$apply();
              }else{
              /* 查询记录失败 */
                if(pageNo === 1){
                  this.upperControl.show('这里好像有bug');
                }else{
                  this.upperControl.show('加载失败');
                }
                this.$apply();
              }
            },
            fail: (msg) => {
                wx.showToast({
                    title: '失败',
                    icon: 'none'
                });
                if(pageNo === 1){
                  this.upperControl.show('这里好像有bug');
                }else{
                  this.upperControl.show('加载失败');
                }
                this.$apply();
            },
            complete: () => {
              callback && callback();
              console.log('请求完成');
            }
      });
    }
    onLoad() {
      // 初始化视图高度
      this.viewHeight = wx.getSystemInfoSync().windowHeight;

      // 初始化数据请求
      const { keyword, pageNo, pageSize } = this.selfData;
      this.requestTripList(
        keyword, 
        pageNo, 
        pageSize, 
        () => {
          this.selfData.pending = false;
        }
      );

      // this.$parent.getUserInfo((data) => {
      //   this.userInfo = data
      //   this.$apply()
      // });
    }
  }
</script>
